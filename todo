# Todo
[] NAT Instance setup for dev (low-cost)
[] VPC Endpoint setup for prod
[] Upgrade cluster version using blue green deployment
[] Experiment RDS to Aurora migration
[] Experiment using ECS
[] Experiment using Fargate

# In-progress

# Blocked
[-] Reduce NAT Gateway cost by utilizing VPC Endpoints

* Using VPC Endpoints doesn't guarantee cost reduction, but more secure
*  If you are multi-az and have many vpc endpoints with low data transfer, it can be more expensive than NAT Gateway
* https://aws.amazon.com/privatelink/pricing/
* https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-pricing.html

| Option        | Hourly (1 endpoint, 1 AZ) | Monthly (1 endpoint, 1 AZ) | Hourly (1 endpoint, 2 AZs) | Monthly (1 endpoint, 2 AZs) | Monthly (6 endpoints, 2 AZs) |
|-------------- |---------------------------|----------------------------|----------------------------|-----------------------------|------------------------------|
| NAT Gateway   | $0.052                    | $37.44                     | $0.104                     | $74.88                      | $74.88                       |
| NAT Instance  | $0.0104                   | $7.49                      | $0.0208                    | $14.98                      | $14.98                       |
| VPC Endpoint  | $0.012                    | $8.64                      | $0.024                     | $17.28                      | $103.68                      |


[-] WAF 
* CloudFront out of the box provides DDoS protection, TLS/SSL Encryption, Geo-Restriction. WAF does not worth the 5$+ fix cost for my requirements.

# Done
[x] Implement frontend application  
[x] Implement backend application   
[x] Set up RDS Postgresql database  
[x] Store sensitive data in AWS Secrets Manager  
[x] Put Backend service in private subnet  
[x] Put DB in private subnet block public access  
[x] Configure Security Groups for the communication between Frontend, Backend, and Database  
[x] Provision the entire infrastructure (EKS cluster, database, IAM roles, networking, etc.) via Terraform    
[x] Enable storage encryption (Encryption at Rest) on Postgresql, migrate the DB if necessary.   
[x] Deploy a bastion host as a jumpserver with SSH.   
[x] Set an automated backup for a time slot.   
[x] Enable enhanced monitoring so you can monitor the current running sessions and queries on DB  
[x] Fix IAM permission to EKS  
[x] Randomize secret manager Postfix
[x] Configure a Github Actions workflow that builds the image and pushes images to ECR 
[x] Route the traffic from the domain name through the load balancer to the pods using an Application Load Balancer  
[x] Configure HPA for the backend and frontend services to automatically scale the number of pods based on CPU/Memory usage
[x] Configure Amazon CloudWatch to collect logs and metrics from EKS
[x] Modularize Terraform code and create environment-based configurations with tfvars
[x] Create an AMI with PostgreSQL pre-installed
[x] Implement CloudFront for serving static content
[x] Put terraform state on S3
[x] Improve the Github Actions workflow to also deploy app to EKS
[x] Integrate Github Action with Codebuild Runners
[x] Don't manage db-credentials secret via a static Helm template. use External Secrets Operator to fully manage secret by syncing it from AWS Secrets Manager.
[x] Implement EKS Cluster Autoscaler to scale when there are not enough nodes
[x] Extract repository to its own repo
[x] Run terraform on GH Action pipeline
[x] Architecture diagram
[x] Create dev branch, run terraform plan on pull request, terraform apply when merged